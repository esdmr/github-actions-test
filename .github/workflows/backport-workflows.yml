name: Backport workflows
concurrency: backport-workflows

on:
  push:
    branches:
      - master
    paths:
      - .github/ISSUE_TEMPLATE/**
      - .github/workflows/**
      - .github/pages-template/**
      # .github/scripts is intentionally not included.

env:
  GIT_AUTHOR_NAME: ${{ github.event.head_commit.author.name }}
  GIT_AUTHOR_EMAIL: ${{ github.event.head_commit.author.email }}
  GIT_COMMITTER_NAME: github-actions[bot]
  GIT_COMMITTER_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
  JOB_COMMIT_MESSAGE: |-
    ${{ github.event.head_commit.message }}

    Original-commit: ${{ github.event.head_commit.url }}

defaults:
  run:
    shell: fish {0}

jobs:
  backport:
    name: Backport workflows
    runs-on: ubuntu-latest

    steps:
        - name: Install fish
          uses: fish-actions/install-fish@v1.1.0

        - name: Checkout
          uses: actions/checkout@v2
          with:
            path: source

        - name: Backport to all branches
          run: |-
            echo ::group::Find remote branches under releases
            set remote_branches (git ls-remote https://github.com/${{ github.repository }} 'refs/heads/releases/*' | awk '{ gsub(/^refs\/heads\//, "", $2); print $2 }')
            and echo Branches to update: $remote_branches
            and echo ::endgroup::
            or  exit 1

            if count $remote_branches >/dev/null
              echo ::group::Clone
              git clone --no-checkout https://github.com/${{ github.repository }} target
              and cd target
              and git fetch
              and echo ::endgroup::
              or  exit 1
            else
              echo No branch exists to update!
              exit
            end

            for branch in $remote_branches
              echo ::group::Backport to $branch
              git checkout -b $branch -t origin/$branch

              and mkdir -vp .github
              and cp -vr ../source/.github/{ISSUE_TEMPLATE,workflows,pages-template} .github

              and git add --all .
              and git commit --author "$GIT_AUTHOR_NAME <$GIT_AUTHOR_EMAIL>" --message $JOB_COMMIT_MESSAGE
              and echo ::endgroup::
              or  exit 1
            end

            echo ::group::Push all branches
            git push origin --all
            and echo ::endgroup::
            or  exit 1
